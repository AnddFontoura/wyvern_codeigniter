-- MySQL Script generated by MySQL Workbench
-- Tue Mar  5 11:35:40 2019
-- Model: New Model    Version: 1.0
-- MySQL Workbench Forward Engineering

SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0;
SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0;
SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION';

-- -----------------------------------------------------
-- Schema u878239129_wyve
-- -----------------------------------------------------

-- -----------------------------------------------------
-- Table `category`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `category` ;

CREATE TABLE IF NOT EXISTS `category` (
  `id_category` INT NOT NULL AUTO_INCREMENT,
  `category_name` VARCHAR(254) NOT NULL,
  `category_status` TINYINT(1) NOT NULL DEFAULT 1,
  `category_image` TEXT NULL,
  `category_description` TEXT NULL,
  `category_created_at` DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `category_updated_at` DATETIME NULL DEFAULT CURRENT_TIMESTAMP,
  PRIMARY KEY (`id_category`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `subcategory`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `subcategory` ;

CREATE TABLE IF NOT EXISTS `subcategory` (
  `id_subcategory` INT NOT NULL AUTO_INCREMENT,
  `category_id` INT NOT NULL,
  `subcategory_name` VARCHAR(254) NOT NULL,
  `subcategory_status` TINYINT(1) NOT NULL DEFAULT 1,
  `subcategory_image` TEXT NULL,
  `subcategory_description` TEXT NULL,
  `subcategory_created_at` DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `subcategory_updated_at` DATETIME NULL DEFAULT CURRENT_TIMESTAMP,
  PRIMARY KEY (`id_subcategory`),
  INDEX `fk_subcategoria_categoria_idx` (`category_id` ASC),
  CONSTRAINT `fk_subcategoria_categoria`
    FOREIGN KEY (`category_id`)
    REFERENCES `category` (`id_category`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `product`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `product` ;

CREATE TABLE IF NOT EXISTS `product` (
  `id_product` INT NOT NULL AUTO_INCREMENT,
  `subcategory_id` INT NOT NULL,
  `product_nickname` VARCHAR(254) NULL,
  `product_status` TINYINT(1) NOT NULL DEFAULT 1,
  `product_price` FLOAT NOT NULL DEFAULT 0.0,
  `product_promotion_price` FLOAT NOT NULL DEFAULT 0.0,
  `product_description` TEXT NULL,
  `product_name` VARCHAR(254) NOT NULL,
  `product_keyword` TEXT NULL,
  `product_storage` INT(9) NOT NULL DEFAULT 0,
  `product_width` FLOAT NULL COMMENT 'largura do produto',
  `product_height` FLOAT NULL COMMENT 'altura do produto',
  `product_depth` FLOAT NULL COMMENT 'profundidade do produto',
  `product_weight` FLOAT NULL COMMENT 'Peso da unidade do produto',
  `product_featured` TINYINT(1) NOT NULL DEFAULT 0,
  `product_created_at` DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `product_updated_at` DATETIME NULL DEFAULT CURRENT_TIMESTAMP,
  `product_recurrent` TINYINT(1) NOT NULL DEFAULT 0,
  `product_barcode` VARCHAR(254) NULL,
  `product_short_description` VARCHAR(254) NULL,
  PRIMARY KEY (`id_product`),
  INDEX `fk_produto_subcategoria1_idx` (`subcategory_id` ASC),
  CONSTRAINT `fk_produto_subcategoria1`
    FOREIGN KEY (`subcategory_id`)
    REFERENCES `subcategory` (`id_subcategory`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `classification_item`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `classification_item` ;

CREATE TABLE IF NOT EXISTS `classification_item` (
  `id_classification_item` INT NOT NULL AUTO_INCREMENT,
  `c_item_name` VARCHAR(254) NOT NULL,
  `c_item_status` TINYINT NOT NULL DEFAULT 1,
  `c_item_description` TEXT NULL,
  `c_item_created_at` DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `c_item_updated_at` DATETIME NULL DEFAULT CURRENT_TIMESTAMP,
  PRIMARY KEY (`id_classification_item`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `item`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `item` ;

CREATE TABLE IF NOT EXISTS `item` (
  `id_item` INT NOT NULL AUTO_INCREMENT,
  `item_name` VARCHAR(254) NOT NULL,
  `item_status` TINYINT NOT NULL DEFAULT 1,
  `classification_item_id` INT NOT NULL,
  `item_description` TEXT NULL,
  `item_created_at` DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `item_updated_at` DATETIME NULL DEFAULT CURRENT_TIMESTAMP,
  PRIMARY KEY (`id_item`),
  INDEX `fk_item_classificacao_item1_idx` (`classification_item_id` ASC),
  CONSTRAINT `fk_item_classificacao_item1`
    FOREIGN KEY (`classification_item_id`)
    REFERENCES `classification_item` (`id_classification_item`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `product_has_item`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `product_has_item` ;

CREATE TABLE IF NOT EXISTS `product_has_item` (
  `id_product_has_item` INT NOT NULL AUTO_INCREMENT,
  `product_id` INT NOT NULL,
  `item_id` INT NOT NULL,
  PRIMARY KEY (`id_product_has_item`),
  INDEX `fk_item_produto_produto1_idx` (`product_id` ASC),
  INDEX `fk_item_produto_itens1_idx` (`item_id` ASC),
  CONSTRAINT `fk_item_produto_produto1`
    FOREIGN KEY (`product_id`)
    REFERENCES `product` (`id_product`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_item_produto_itens1`
    FOREIGN KEY (`item_id`)
    REFERENCES `item` (`id_item`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `login`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `user` ;

CREATE TABLE IF NOT EXISTS `user` (
  `id_user` INT NOT NULL AUTO_INCREMENT,
  `user_name` VARCHAR(45) NOT NULL,
  `user_password` VARCHAR(45) NOT NULL,
  `user_status` TINYINT(1) NOT NULL DEFAULT 1,
  PRIMARY KEY (`id_user`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `product_image`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `product_image` ;

CREATE TABLE IF NOT EXISTS `product_image` (
  `id_product_image` INT NOT NULL AUTO_INCREMENT,
  `product_id` INT NOT NULL,
  `p_image_image` TEXT NOT NULL,
  `p_image_status` TINYINT(1) NOT NULL DEFAULT 1,
  `p_image_main` TINYINT(1) NOT NULL DEFAULT 0,
  `p_image_order` INT NULL,
  `p_image_name` VARCHAR(254) NULL,
  `p_image_description` LONGTEXT NULL,
  PRIMARY KEY (`id_product_image`),
  INDEX `fk_produto_imagem_produto1_idx` (`product_id` ASC),
  CONSTRAINT `fk_produto_imagem_produto1`
    FOREIGN KEY (`product_id`)
    REFERENCES `product` (`id_product`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `customer_login`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `customer_login` ;

CREATE TABLE IF NOT EXISTS `customer_login` (
  `id_customer_login` INT NOT NULL AUTO_INCREMENT,
  `c_login_user` VARCHAR(254) NOT NULL,
  `c_login_password` VARCHAR(254) NOT NULL,
  `c_login_email` VARCHAR(254) NOT NULL,
  `c_login_short_name` VARCHAR(254) NOT NULL,
  PRIMARY KEY (`id_customer_login`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `customer`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `customer` ;

CREATE TABLE IF NOT EXISTS `customer` (
  `id_customer` INT NOT NULL AUTO_INCREMENT,
  `customer_cpf_cnpj` VARCHAR(45) NULL,
  `customer_rg` VARCHAR(45) NULL,
  `customer_data` TEXT NULL,
  `customer_type` TINYINT(1) NOT NULL DEFAULT 0 COMMENT '0 = Pessoa | 1 = Empresa',
  `customer_enable_email` TINYINT(1) NOT NULL DEFAULT 1,
  `customer_status` TINYINT(1) NOT NULL DEFAULT 1,
  `customer_login_id` INT NULL,
  PRIMARY KEY (`id_customer`),
  INDEX `fk_customer_customer_login1_idx` (`customer_login_id` ASC),
  CONSTRAINT `fk_customer_customer_login1`
    FOREIGN KEY (`customer_login_id`)
    REFERENCES `customer_login` (`id_customer_login`)
    ON DELETE CASCADE
    ON UPDATE CASCADE)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `status`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `status` ;

CREATE TABLE IF NOT EXISTS `status` (
  `id_status` INT NOT NULL AUTO_INCREMENT,
  `status_name` VARCHAR(254) NOT NULL,
  `status_service_order` TINYINT(1) NOT NULL DEFAULT 0,
  `status_order` TINYINT(1) NOT NULL DEFAULT 0,
  `status_available` TINYINT(1) NOT NULL DEFAULT 1,
  PRIMARY KEY (`id_status`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `order`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `order` ;

CREATE TABLE IF NOT EXISTS `order` (
  `id_order` INT NOT NULL AUTO_INCREMENT,
  `order_date` DATETIME NOT NULL,
  `customer_id` INT NOT NULL,
  `status_id` INT NOT NULL,
  `login_id` INT NOT NULL,
  PRIMARY KEY (`id_order`),
  INDEX `fk_order_customer1_idx` (`customer_id` ASC),
  INDEX `fk_order_status1_idx` (`status_id` ASC),
  INDEX `fk_order_login1_idx` (`login_id` ASC),
  CONSTRAINT `fk_order_customer1`
    FOREIGN KEY (`customer_id`)
    REFERENCES `customer` (`id_customer`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_order_status1`
    FOREIGN KEY (`status_id`)
    REFERENCES `status` (`id_status`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_order_login1`
    FOREIGN KEY (`login_id`)
    REFERENCES `login` (`id_login`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `order_product`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `order_product` ;

CREATE TABLE IF NOT EXISTS `order_product` (
  `id_order_product` INT NOT NULL AUTO_INCREMENT,
  `order_id` INT NOT NULL,
  `product_id` INT NOT NULL,
  `o_product_price` FLOAT NOT NULL DEFAULT 0.0,
  `o_product_amount` INT(5) NOT NULL,
  `o_product_final_price` FLOAT NOT NULL DEFAULT 0.0,
  `o_product_discount` FLOAT NOT NULL DEFAULT 0.0,
  `o_product_percent` FLOAT NULL DEFAULT 0.0,
  PRIMARY KEY (`id_order_product`),
  INDEX `fk_pedido_produto_produto1_idx` (`product_id` ASC),
  INDEX `fk_pedido_produto_pedido1_idx` (`order_id` ASC),
  CONSTRAINT `fk_pedido_produto_produto1`
    FOREIGN KEY (`product_id`)
    REFERENCES `product` (`id_product`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_pedido_produto_pedido1`
    FOREIGN KEY (`order_id`)
    REFERENCES `order` (`id_order`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `payment_method`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `payment_method` ;

CREATE TABLE IF NOT EXISTS `payment_method` (
  `id_payment_method` INT NOT NULL AUTO_INCREMENT,
  `p_method_name` VARCHAR(254) NOT NULL,
  PRIMARY KEY (`id_payment_method`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `service_order`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `service_order` ;

CREATE TABLE IF NOT EXISTS `service_order` (
  `id_service_order` INT NOT NULL AUTO_INCREMENT,
  `customer_id` INT NOT NULL,
  `status_id` INT NOT NULL,
  `order_id` INT NULL,
  `s_order_description` TEXT NOT NULL,
  `s_order_start_date` DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `s_order_end_date` DATETIME NULL,
  `s_order_price` FLOAT NOT NULL DEFAULT 0.0,
  `s_order_final_price` FLOAT NOT NULL DEFAULT 0.0,
  `s_order_discount` FLOAT NOT NULL DEFAULT 0.0,
  `s_order_percent` FLOAT NOT NULL DEFAULT 0.0,
  PRIMARY KEY (`id_service_order`),
  INDEX `fk_service_order_customer1_idx` (`customer_id` ASC),
  INDEX `fk_service_order_status1_idx` (`status_id` ASC),
  INDEX `fk_service_order_order1_idx` (`order_id` ASC),
  CONSTRAINT `fk_service_order_customer1`
    FOREIGN KEY (`customer_id`)
    REFERENCES `customer` (`id_customer`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_service_order_status1`
    FOREIGN KEY (`status_id`)
    REFERENCES `status` (`id_status`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_service_order_order1`
    FOREIGN KEY (`order_id`)
    REFERENCES `order` (`id_order`)
    ON DELETE CASCADE
    ON UPDATE CASCADE)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `storage_history`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `storage_history` ;

CREATE TABLE IF NOT EXISTS `storage_history` (
  `id_storage_history` INT NOT NULL AUTO_INCREMENT,
  `product_id` INT NOT NULL,
  `service_order_id` INT NULL,
  `order_id` INT NULL,
  `s_history_operation` INT NOT NULL COMMENT '0 = Subtrair| 1 = Adicionar ',
  `s_history_before` INT NOT NULL,
  `s_history_after` INT NOT NULL,
  `s_history_date` DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `s_history_description` TEXT NULL,
  `s_history_status` TINYINT(1) NOT NULL DEFAULT 1,
  PRIMARY KEY (`id_storage_history`),
  INDEX `fk_storage_history_product1_idx` (`product_id` ASC),
  INDEX `fk_storage_history_order1_idx` (`order_id` ASC),
  INDEX `fk_storage_history_service_order1_idx` (`service_order_id` ASC),
  UNIQUE INDEX `s_history_status_UNIQUE` (`s_history_status` ASC),
  UNIQUE INDEX `s_history_date_UNIQUE` (`s_history_date` ASC),
  UNIQUE INDEX `s_history_operation_UNIQUE` (`s_history_operation` ASC),
  UNIQUE INDEX `product_id_UNIQUE` (`product_id` ASC),
  CONSTRAINT `fk_storage_history_product1`
    FOREIGN KEY (`product_id`)
    REFERENCES `product` (`id_product`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_storage_history_order1`
    FOREIGN KEY (`order_id`)
    REFERENCES `order` (`id_order`)
    ON DELETE CASCADE
    ON UPDATE CASCADE,
  CONSTRAINT `fk_storage_history_service_order1`
    FOREIGN KEY (`service_order_id`)
    REFERENCES `service_order` (`id_service_order`)
    ON DELETE CASCADE
    ON UPDATE CASCADE)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `customer_adress`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `customer_adress` ;

CREATE TABLE IF NOT EXISTS `customer_adress` (
  `id_customer_payment_adress` INT NOT NULL AUTO_INCREMENT,
  `c_adress_adress` TEXT NOT NULL,
  `c_adress_zipcode` VARCHAR(45) NOT NULL,
  `c_adress_country` VARCHAR(45) NOT NULL,
  `c_adress_neighborhood` TEXT NOT NULL,
  `c_adress_city` VARCHAR(45) NOT NULL,
  `c_adress_state` VARCHAR(45) NOT NULL,
  `c_adress_status` TINYINT(1) NOT NULL DEFAULT 1,
  `c_adress_is_billing` TINYINT(1) NOT NULL DEFAULT 0,
  `c_adress_is_delivery` TINYINT(1) NOT NULL DEFAULT 1,
  `c_adress_is_adress` TINYINT(1) NOT NULL DEFAULT 1,
  `customer_id` INT NOT NULL,
  PRIMARY KEY (`id_customer_payment_adress`),
  INDEX `fk_customer_adress_customer1_idx` (`customer_id` ASC),
  CONSTRAINT `fk_customer_adress_customer1`
    FOREIGN KEY (`customer_id`)
    REFERENCES `customer` (`id_customer`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `payment`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `payment` ;

CREATE TABLE IF NOT EXISTS `payment` (
  `id_payment` INT NOT NULL,
  `payment_value` FLOAT NOT NULL,
  `payment_parcels` INT(11) NOT NULL COMMENT 'Quantidade de parcelas que esse valor foi dividido',
  `payment_type` INT(2) NOT NULL COMMENT '1 => Entrada  (Recebidos) | 2 =>  Saida (Gastos)',
  `payment_status` TINYINT(1) NOT NULL,
  `payment_created_at` DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
  PRIMARY KEY (`id_payment`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `payment_parcel`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `payment_parcel` ;

CREATE TABLE IF NOT EXISTS `payment_parcel` (
  `id_payment_parcel` INT NOT NULL AUTO_INCREMENT,
  `p_parcel_value` FLOAT NOT NULL,
  `p_parcel_number` INT(11) NOT NULL,
  `p_parcel_status` VARCHAR(45) NOT NULL,
  `payment_method_id` INT NOT NULL,
  `payment_id` INT NOT NULL,
  `p_parcel_created_at` DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `p_parcel_payed_at` DATETIME NULL,
  `p_parcel_identification` TEXT NULL,
  PRIMARY KEY (`id_payment_parcel`),
  INDEX `fk_payment_parcel_payment_method1_idx` (`payment_method_id` ASC),
  INDEX `fk_payment_parcel_payment1_idx` (`payment_id` ASC),
  CONSTRAINT `fk_payment_parcel_payment_method1`
    FOREIGN KEY (`payment_method_id`)
    REFERENCES `payment_method` (`id_payment_method`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_payment_parcel_payment1`
    FOREIGN KEY (`payment_id`)
    REFERENCES `payment` (`id_payment`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `email_configuration`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `email_configuration` ;

CREATE TABLE IF NOT EXISTS `email_configuration` (
  `id_email_configuration` INT NOT NULL AUTO_INCREMENT,
  `e_configuration_protocol` VARCHAR(512) NOT NULL,
  `e_configuration_smtp_host` VARCHAR(512) NOT NULL,
  `e_configuration_smtp_user` VARCHAR(512) NOT NULL,
  `e_configuration_smtp_pass` VARCHAR(512) NOT NULL,
  `e_configuration_smtp_port` VARCHAR(512) NOT NULL,
  PRIMARY KEY (`id_email_configuration`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `bill`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `bill` ;

CREATE TABLE IF NOT EXISTS `bill` (
  `id_bill` INT NOT NULL AUTO_INCREMENT,
  `bill_description` TEXT NOT NULL,
  `bill_expiration_date` DATETIME NOT NULL,
  `bill_value` FLOAT NOT NULL DEFAULT 0.0,
  `bill_reference` TEXT NULL,
  `bill_bank_line` VARCHAR(45) NULL,
  PRIMARY KEY (`id_bill`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `discount_coupon`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `discount_coupon` ;

CREATE TABLE IF NOT EXISTS `discount_coupon` (
  `id_discount_coupon` INT NOT NULL AUTO_INCREMENT,
  `d_coupon_name` VARCHAR(254) NOT NULL,
  `d_coupon_quantity` INT NOT NULL DEFAULT 0 COMMENT '0 =  Infinito | -1 =  Acabou | > 0 = quantidade específica',
  `d_coupon_start_date` DATE NULL,
  `d_coupon_end_date` DATE NULL,
  `d_coupon_status` TINYINT(1) NOT NULL,
  `d_coupon_value` FLOAT NOT NULL,
  `d_coupon_type` TINYINT NOT NULL DEFAULT 1 COMMENT '1 = valor inteiro | 2  = porcentagem',
  PRIMARY KEY (`id_discount_coupon`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `accounting`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `accounting` ;

CREATE TABLE IF NOT EXISTS `accounting` (
  `id_accounting` INT NOT NULL AUTO_INCREMENT,
  `bill_id` INT NULL,
  `order_id` INT NULL,
  `payment_id` INT NULL,
  `service_order_id` INT NULL,
  `accounting_payment_date` DATETIME NULL,
  `accounting_movement` INT(2) NOT NULL DEFAULT 0 COMMENT '0 =  In (Entrada) | 1 = Out (Saida)',
  `accounting_value` FLOAT NULL DEFAULT 0.0 COMMENT 'Valor da movimentação de entrada ou saida',
  `accounting_expiration_date` DATE NULL COMMENT 'data do vencimento',
  `accounting_day` INT NOT NULL,
  `accounting_month` INT NOT NULL,
  `accounting_year` INT NOT NULL,
  `discount_coupon_id` INT NOT NULL,
  PRIMARY KEY (`id_accounting`),
  INDEX `fk_accounting_order1_idx` (`order_id` ASC),
  INDEX `fk_accounting_payment1_idx` (`payment_id` ASC),
  INDEX `fk_accounting_service_order1_idx` (`service_order_id` ASC),
  INDEX `fk_accounting_bill1_idx` (`bill_id` ASC),
  INDEX `fk_accounting_discount_coupon1_idx` (`discount_coupon_id` ASC),
  CONSTRAINT `fk_accounting_order1`
    FOREIGN KEY (`order_id`)
    REFERENCES `order` (`id_order`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_accounting_payment1`
    FOREIGN KEY (`payment_id`)
    REFERENCES `payment` (`id_payment`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_accounting_service_order1`
    FOREIGN KEY (`service_order_id`)
    REFERENCES `service_order` (`id_service_order`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_accounting_bill1`
    FOREIGN KEY (`bill_id`)
    REFERENCES `bill` (`id_bill`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_accounting_discount_coupon1`
    FOREIGN KEY (`discount_coupon_id`)
    REFERENCES `discount_coupon` (`id_discount_coupon`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `shopping_cart`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `shopping_cart` ;

CREATE TABLE IF NOT EXISTS `shopping_cart` (
  `id_shopping_cart` INT NOT NULL AUTO_INCREMENT,
  `s_cart_product` TEXT NULL,
  `s_cart_created_at` DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `customer_id` INT NOT NULL,
  PRIMARY KEY (`id_shopping_cart`),
  INDEX `fk_shopping_cart_customer1_idx` (`customer_id` ASC),
  CONSTRAINT `fk_shopping_cart_customer1`
    FOREIGN KEY (`customer_id`)
    REFERENCES `customer` (`id_customer`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `plan_type`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `plan_type` ;

CREATE TABLE IF NOT EXISTS `plan_type` (
  `id_plan_type` INT NOT NULL AUTO_INCREMENT,
  `p_type_name` VARCHAR(254) NOT NULL,
  `p_type_days` INT NOT NULL,
  `p_type_status` INT NOT NULL DEFAULT 1,
  PRIMARY KEY (`id_plan_type`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `plan`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `plan` ;

CREATE TABLE IF NOT EXISTS `plan` (
  `id_plan` INT NOT NULL AUTO_INCREMENT,
  `plan_name` VARCHAR(254) NOT NULL,
  `plan_description` TEXT NOT NULL,
  `plan_price` FLOAT NOT NULL DEFAULT 0.0,
  `plan_status` TINYINT(1) NOT NULL DEFAULT 1,
  `plan_image` VARCHAR(254) NULL,
  `plan_type_id` INT NOT NULL,
  PRIMARY KEY (`id_plan`),
  INDEX `fk_plan_plan_type1_idx` (`plan_type_id` ASC),
  CONSTRAINT `fk_plan_plan_type1`
    FOREIGN KEY (`plan_type_id`)
    REFERENCES `plan_type` (`id_plan_type`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `order_plan`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `order_plan` ;

CREATE TABLE IF NOT EXISTS `order_plan` (
  `id_order_plan` INT NOT NULL AUTO_INCREMENT,
  `plan_id` INT NOT NULL,
  `order_id` INT NOT NULL,
  PRIMARY KEY (`id_order_plan`),
  INDEX `fk_order_plan_plan1_idx` (`plan_id` ASC),
  INDEX `fk_order_plan_order1_idx` (`order_id` ASC),
  CONSTRAINT `fk_order_plan_plan1`
    FOREIGN KEY (`plan_id`)
    REFERENCES `plan` (`id_plan`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_order_plan_order1`
    FOREIGN KEY (`order_id`)
    REFERENCES `order` (`id_order`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `permission`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `permission` ;

CREATE TABLE IF NOT EXISTS `permission` (
  `id_permission` INT NOT NULL AUTO_INCREMENT,
  `permission_name` VARCHAR(254) NOT NULL,
  `permission_identification` VARCHAR(254) NOT NULL,
  `permission_status` VARCHAR(254) NOT NULL DEFAULT '1',
  PRIMARY KEY (`id_permission`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `service`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `service` ;

CREATE TABLE IF NOT EXISTS `service` (
  `id_service` INT NOT NULL AUTO_INCREMENT,
  `service_name` VARCHAR(254) NOT NULL,
  `service_nickname` VARCHAR(254) NULL,
  `service_status` TINYINT(1) NOT NULL DEFAULT 1,
  `service_price` FLOAT NOT NULL DEFAULT 0.0,
  `service_description` TEXT NULL,
  PRIMARY KEY (`id_service`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `serviceorder_has_service`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `serviceorder_has_service` ;

CREATE TABLE IF NOT EXISTS `serviceorder_has_service` (
  `id_serviceorder_has_service` INT NOT NULL,
  `service_order_id` INT NOT NULL,
  `service_id` INT NOT NULL,
  `sohs_start` DATETIME NULL,
  `sohs_end` DATETIME NULL,
  `sohs_price` FLOAT NOT NULL DEFAULT 0.0,
  `sohs_final_price` FLOAT NOT NULL DEFAULT 0.0,
  `sohs_discount` FLOAT NOT NULL DEFAULT 0.0,
  `sohs_percent` FLOAT NOT NULL DEFAULT 0.0,
  `sohs_status` TINYINT(1) NOT NULL,
  INDEX `fk_service_order_has_service_service1_idx` (`service_id` ASC),
  INDEX `fk_service_order_has_service_service_order1_idx` (`service_order_id` ASC),
  PRIMARY KEY (`id_serviceorder_has_service`),
  CONSTRAINT `fk_service_order_has_service_service_order1`
    FOREIGN KEY (`service_order_id`)
    REFERENCES `service_order` (`id_service_order`)
    ON DELETE CASCADE
    ON UPDATE CASCADE,
  CONSTRAINT `fk_service_order_has_service_service1`
    FOREIGN KEY (`service_id`)
    REFERENCES `service` (`id_service`)
    ON DELETE CASCADE
    ON UPDATE CASCADE)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `calendar`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `calendar` ;

CREATE TABLE IF NOT EXISTS `calendar` (
  `id_calendar` INT NOT NULL AUTO_INCREMENT,
  `calendar_name` VARCHAR(254) NULL,
  `calendar_date` DATE NOT NULL DEFAULT CURRENT_DATE,
  `calendar_description` TEXT NULL,
  `calendar_status` TINYINT(1) NOT NULL,
  PRIMARY KEY (`id_calendar`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `configuration`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `configuration` ;

CREATE TABLE IF NOT EXISTS `configuration` (
  `id_configuration` INT NOT NULL AUTO_INCREMENT,
  `configuration_name` VARCHAR(1024) NOT NULL,
  `configuration_value` VARCHAR(1024) NOT NULL,
  `configuration_status` TINYINT(1) NOT NULL,
  PRIMARY KEY (`id_configuration`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `bank`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `bank` ;

CREATE TABLE IF NOT EXISTS `bank` (
  `id_bank` INT NOT NULL AUTO_INCREMENT,
  `bank_code` VARCHAR(254) NOT NULL,
  `bank_name` VARCHAR(254) NOT NULL,
  `bank_status` TINYINT(1) NOT NULL DEFAULT 1,
  PRIMARY KEY (`id_bank`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `company`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `company` ;

CREATE TABLE IF NOT EXISTS `company` (
  `id_company` INT NULL AUTO_INCREMENT,
  `company_fantasy_name` VARCHAR(254) NOT NULL,
  `company_real_name` VARCHAR(254) NOT NULL,
  `company_status` VARCHAR(254) NOT NULL,
  `company_adress` TEXT NOT NULL,
  `company_logo` TEXT CHARACTER SET 'big5' COLLATE 'big5_chinese_ci' NULL,
  `company_cnpj` VARCHAR(254) NULL,
  `company_telephone` VARCHAR(254) NULL,
  `company_email` VARCHAR(254) NULL,
  `company_agency` VARCHAR(254) NULL,
  `company_account` VARCHAR(254) NULL,
  `bank_id` INT NOT NULL,
  PRIMARY KEY (`id_company`),
  INDEX `fk_company_bank1_idx` (`bank_id` ASC),
  CONSTRAINT `fk_company_bank1`
    FOREIGN KEY (`bank_id`)
    REFERENCES `bank` (`id_bank`)
    ON DELETE CASCADE
    ON UPDATE CASCADE)
ENGINE = InnoDB;


SET SQL_MODE=@OLD_SQL_MODE;
SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS;
SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS;

-- -----------------------------------------------------
-- Data for table `login`
-- -----------------------------------------------------
START TRANSACTION;
INSERT INTO `login` (`id_login`, `login_name`, `login_password`, `login_status`, `login_permissions`) VALUES (DEFAULT, 'teste', '698dc19d489c4e4db73e28a713eab07b', 1, NULL);

COMMIT;


-- -----------------------------------------------------
-- Data for table `payment_method`
-- -----------------------------------------------------
START TRANSACTION;
INSERT INTO `payment_method` (`id_payment_method`, `p_method_name`) VALUES (1, 'Cartão de Crédito');
INSERT INTO `payment_method` (`id_payment_method`, `p_method_name`) VALUES (2, 'Cartão de Débito');
INSERT INTO `payment_method` (`id_payment_method`, `p_method_name`) VALUES (3, 'Boleto');
INSERT INTO `payment_method` (`id_payment_method`, `p_method_name`) VALUES (4, 'Dinheiro');
INSERT INTO `payment_method` (`id_payment_method`, `p_method_name`) VALUES (5, 'Cheque');
INSERT INTO `payment_method` (`id_payment_method`, `p_method_name`) VALUES (6, 'PagueSeguro');
INSERT INTO `payment_method` (`id_payment_method`, `p_method_name`) VALUES (7, 'Paypal');
INSERT INTO `payment_method` (`id_payment_method`, `p_method_name`) VALUES (8, 'MOIP');
INSERT INTO `payment_method` (`id_payment_method`, `p_method_name`) VALUES (9, 'MercadoLivre');
INSERT INTO `payment_method` (`id_payment_method`, `p_method_name`) VALUES (10, 'PJBank');

COMMIT;


-- -----------------------------------------------------
-- Data for table `plan_type`
-- -----------------------------------------------------
START TRANSACTION;
INSERT INTO `plan_type` (`id_plan_type`, `p_type_name`, `p_type_days`, `p_type_status`) VALUES (1, 'Semanal', 7, 1);
INSERT INTO `plan_type` (`id_plan_type`, `p_type_name`, `p_type_days`, `p_type_status`) VALUES (2, 'Quinzenal', 15, 1);
INSERT INTO `plan_type` (`id_plan_type`, `p_type_name`, `p_type_days`, `p_type_status`) VALUES (3, 'Mensal', 30, 1);
INSERT INTO `plan_type` (`id_plan_type`, `p_type_name`, `p_type_days`, `p_type_status`) VALUES (4, 'Bimestral', 60, 1);
INSERT INTO `plan_type` (`id_plan_type`, `p_type_name`, `p_type_days`, `p_type_status`) VALUES (5, 'Trimestral', 90, 1);
INSERT INTO `plan_type` (`id_plan_type`, `p_type_name`, `p_type_days`, `p_type_status`) VALUES (6, 'Semestral', 180, 1);
INSERT INTO `plan_type` (`id_plan_type`, `p_type_name`, `p_type_days`, `p_type_status`) VALUES (7, 'Anual', 360, 1);

COMMIT;


-- -----------------------------------------------------
-- Data for table `permission`
-- -----------------------------------------------------
START TRANSACTION;
INSERT INTO `permission` (`id_permission`, `permission_name`, `permission_identification`, `permission_status`) VALUES (1, 'category', 'Categoria', '1');
INSERT INTO `permission` (`id_permission`, `permission_name`, `permission_identification`, `permission_status`) VALUES (2, 'subcategory', 'Sub Categoria', '1');
INSERT INTO `permission` (`id_permission`, `permission_name`, `permission_identification`, `permission_status`) VALUES (3, 'item', 'Item', '1');
INSERT INTO `permission` (`id_permission`, `permission_name`, `permission_identification`, `permission_status`) VALUES (4, 'item_category', 'Categoria Item', '1');
INSERT INTO `permission` (`id_permission`, `permission_name`, `permission_identification`, `permission_status`) VALUES (5, 'product', 'Produto', '1');
INSERT INTO `permission` (`id_permission`, `permission_name`, `permission_identification`, `permission_status`) VALUES (6, 'product_image', 'Imagem do Produto', '1');
INSERT INTO `permission` (`id_permission`, `permission_name`, `permission_identification`, `permission_status`) VALUES (7, 'product_item', 'Itens do Produto', '1');
INSERT INTO `permission` (`id_permission`, `permission_name`, `permission_identification`, `permission_status`) VALUES (8, 'order', 'Pedidos', '1');
INSERT INTO `permission` (`id_permission`, `permission_name`, `permission_identification`, `permission_status`) VALUES (9, 'login', 'Usuários do Sistema', '1');
INSERT INTO `permission` (`id_permission`, `permission_name`, `permission_identification`, `permission_status`) VALUES (10, 'customer', 'Clientes', '1');
INSERT INTO `permission` (`id_permission`, `permission_name`, `permission_identification`, `permission_status`) VALUES (11, 'accounting', 'Contabilidade', '1');
INSERT INTO `permission` (`id_permission`, `permission_name`, `permission_identification`, `permission_status`) VALUES (12, 'discount_coupon', 'Cupom de Desconto', '1');

COMMIT;
